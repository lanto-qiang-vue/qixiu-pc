<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	
	<bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:spring/jdbc.properties</value>
        </property>
    </bean>
    <!-- 配置数据源 商务端--><!-- p:maxIdleTime 最大空闲时间 -->
    <!--p:maintenanceInterval 连接回收时间-->
    <!--p:borrowConnectionTimeout 获取连接失败重新获等待最大时间，在这个时间内如果有可用连接，将返回-->
    <bean id="dataSourceSw" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init" destroy-method="close"
    		p:url="${swdb.url}"
    		p:user="${swdb.username}"
    		p:password="${swdb.password}"
    		p:uniqueResourceName="${swdb.uniqueResourceName}"
    		p:driverClassName="${swdb.dirver}"
    		p:maxPoolSize="${swdb.maxPoolSize}"
    		p:minPoolSize="${swdb.minPoolSize}"
    		p:maxIdleTime="180"
    		p:maxLifetime="0"
    		p:borrowConnectionTimeout="120"
    		p:maintenanceInterval="120"
    		p:reapTimeout="0"
    		p:testQuery="select 1" 
    />

   <!-- 配置数据源 政务端--><!-- p:maxIdleTime 最大空闲时间 -->
   <bean id="dataSourceZw" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean" init-method="init" destroy-method="close"
   			p:url="${zwdb.url}"
    		p:user="${zwdb.username}"
    		p:password="${zwdb.password}"
    		p:uniqueResourceName="${zwdb.uniqueResourceName}"
    		p:driverClassName="${zwdb.dirver}"
    		p:maxPoolSize="${zwdb.maxPoolSize}"
    		p:minPoolSize="${zwdb.minPoolSize}"
    		p:maxIdleTime="180"
    		p:maxLifetime="0"
    		p:borrowConnectionTimeout="120"
    		p:maintenanceInterval="120"
    		p:reapTimeout="0"
    		p:testQuery="select 1" 
    />
        
	 <!-- JTA事物管理器 -->
	<bean id="atomikosUserTransaction"
        class="com.atomikos.icatch.jta.UserTransactionImp">
        <description>UserTransactionImp</description>
        <property name="transactionTimeout" value="300"/>
    </bean>

    <bean id="atomikosTransactionManager"
        class="com.atomikos.icatch.jta.UserTransactionManager"
        init-method="init" destroy-method="close">
        <description>UserTransactionManager</description>
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>
    
    <bean id="transactionManager"
        class="org.springframework.transaction.jta.JtaTransactionManager">
        <description>JtaTransactionManager</description>
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager" />
        </property>
        <property name="userTransaction">
            <ref bean="atomikosUserTransaction" />
        </property>
         <!-- 必须设置，否则程序出现异常 JtaTransactionManager does not support custom isolation levels by default -->
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean> 
		
	<!-- 配置Jdbc模板  -->
	<bean id="jdbcTemplateSw" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSourceSw" />
	
	<bean id="jdbcTemplateZw" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSourceZw" />
		
		
	<!-- 参数管理  name="dbType" value="ORACLE" value="MSSQL" value="MYSQL" 选择数据库类型请从这里复制-->
	<bean id="paramInit" class="org.softbase.controller.ParamInit" init-method="init">
		<!-- "ORACLE","MSSQL","MYSQL" 选择数据库类型请从这里复制 -->
		<property name="dbType"> 
			<map key-type="java.lang.String"> 
				<entry key="swdb" value="${swdb.dbtype}" /> 
				<entry key="zwdb" value="${zwdb.dbtype}" /> 
			</map> 
		</property>
		<!-- 默认的数据库类型-->
		<property name="defaultDbTypeKey" value="${jdbc.defaultDb}" />
		
		<property name="showSql" value="${jdbc.showSql}"/>
		
		<!-- 上传附件地址：测试地址：D:\fileUpload\attach\ 生产地址：\\10.194.102.7\fileShare\fileUpload\attach\ -->
		<property name="attachFileUploadPath" value="${common.fileuploadpath}"/>
		
		<!-- 上传头像地址：测试地址：D:\fileUpload\photo\ 生产地址：\\10.194.102.7\fileShare\fileUpload\photo\ -->
		<property name="photoFileUploadPath" value="${common.photouploadpath}"/>
	</bean>
	
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="start*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="execute*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="assign*" propagation="REQUIRED" rollback-for="java.lang.Exception"/> 
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="complete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="finish*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="terminate*" propagation="REQUIRED" rollback-for="java.lang.Exception"/> 
			<tx:method name="take*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="deploy*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="undeploy*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="redeploy*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			
 			<tx:method name="get*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="is*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.lanto.shqixiu.shwgweb.service..*(..))"/>
	</aop:config>
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	 <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="org.softbase.dao"/>
    <context:component-scan base-package="org.softbase.service"/>
    <context:component-scan base-package="com.lanto.shqixiu.shwgweb.service,com.lanto.shqixiu.shwgweb.common"/>
	<!-- 约定优于配置，约定优于配置 -->
	<task:annotation-driven/>
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- one of the properties available; the maximum file size in bytes -->  
        <property name="maxUploadSize" value="10485760000000" />  
    </bean> 
</beans>
